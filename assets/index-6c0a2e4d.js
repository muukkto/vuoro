(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function e(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(i){if(i.ep)return;i.ep=!0;const n=e(i);fetch(i.href,n)}})();class C{handleFileUpload(){console.log("Handling file upload...");const[t,e]=this.getUploadedFiles();if(!t||!e){alert("Please upload both CSV files.");return}return this.readFiles([t,e]).then(([s,i])=>({...this.processFiles(s,i),supervisorsData:s,examDaysData:i})).catch(s=>(this.handleFileReadError(s),null))}handleExamDaysUpload(){console.log("Handling exam days upload...");const t=document.getElementById("examDaysFile").files[0];if(!t){alert("Please upload the exam days CSV file.");return}return this.readFiles([t]).then(([e])=>{if(this.validateCSV(e,"examDays")){const s=this.parseExamDays(e);return console.log("Parsed Exam Days:",s),s}else return alert("Invalid Exam Days CSV format."),null}).catch(e=>{alert("Failed to read the exam days file. Please try again."),console.error("File read error:",e)})}handleAssignmentUpload(){console.log("Handling assignment upload...");const t=document.getElementById("assignmentFile").files[0];if(!t){alert("Please upload the assignment CSV file.");return}return this.readFiles([t]).then(([e])=>this.parseAssignments(e)).catch(e=>{alert("Failed to read the assignment file. Please try again."),console.error("File read error:",e)})}parseAssignments(t){console.log("Parsing assignments data...");const{rows:e,headers:s}=this.splitCSV(t);return e.reduce((i,n,a)=>{var d;const l=a+1,r={firstName:n[s.indexOf("First Name")],lastName:n[s.indexOf("Last Name")],languageSkill:n[s.indexOf("Language Skill")],previousExperience:n[s.indexOf("Previous Experience")]==="Checked",disqualifications:((d=n[s.indexOf("Disqualifications")])==null?void 0:d.split(", "))||[]},u=s.filter(o=>/^\d{2}\.\d{2}\.\d{4}-[A-Z]$/.test(o)).map(o=>{const c=`${o}-Hall`,p=s.indexOf(c),m=s.indexOf(o);if(p===-1||m===-1)return null;const f=n[p],v=n[m];return!f||!v?null:{date:o.split("-")[0],examCode:o.split("-")[1],hall:f,timeRange:v}}).filter(o=>o!==null);return i[l]={supervisor:r,shifts:u},i},{})}getUploadedFiles(){const t=document.getElementById("supervisorsFile").files[0],e=document.getElementById("examDaysFile").files[0];return[t,e]}readFiles(t){const e=s=>new Promise((i,n)=>{const a=new FileReader;a.onload=l=>i(l.target.result),a.onerror=l=>n(l),a.readAsText(s)});return Promise.all(t.map(e))}processFiles(t,e){if(this.validateCSV(t,"supervisors")&&this.validateCSV(e,"examDays")){const s=this.parseSupervisors(t),i=this.parseExamDays(e);return{supervisors:s,examDays:i}}return null}handleFileReadError(t){alert("Failed to read files. Please try again."),console.error("File read error:",t)}parseSupervisors(t){console.log("Parsing supervisors data...");const{rows:e,headers:s}=this.splitCSV(t),i=this.getDateColumns(s);return e.map((n,a)=>{var l,r;return{id:a+1,lastName:n[s.indexOf("Sukunimi")],firstName:n[s.indexOf("Etunimi")],availableDays:i.filter(u=>n[s.indexOf(u)]==="Checked"),languageSkill:n[s.indexOf("Ruotsinkielen taito")],previousExperience:n[s.indexOf("Valvonut aikaisemmin")]==="Checked",position:n[s.indexOf("Sijoitus")],disqualifications:((l=n[s.indexOf("Jääviydet")])==null?void 0:l.split(" "))||[],shiftPreferences:((r=n[s.indexOf("Vuorotoiveet")])==null?void 0:r.match(/\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}-\d{2}:\d{2}/g))||[]}})}parseExamDays(t){console.log("Parsing exam days data...");const{rows:e,headers:s}=this.splitCSV(t);return e.map(i=>({date:i[s.indexOf("Päivä")],timeRange:i[s.indexOf("Koe klo")],examName:i[s.indexOf("Valintakokeen nimi")],examCode:i[s.indexOf("Koekoodi")],totalParticipants:parseInt(i[s.indexOf("Osallistujat yhteensä")],10),halls:this.parseHalls(i,s),shiftA:this.parseShift(i,s,"A"),shiftB:this.parseShift(i,s,"B")}))}parseHalls(t,e){return e.filter(s=>/^Halli [A-Za-z0-9]+ osallistujat$/.test(s)).map(s=>({name:s.replace(" osallistujat",""),participants:parseInt(t[e.indexOf(s)],10)||0}))}parseShift(t,e,s){const i=e.indexOf(`Työvuoro ${s} klo`),n=e.indexOf(`Työvuoro ${s} hlömäärä`);return i===-1||n===-1?null:{timeRange:t[i],minSupervisors:parseInt(t[n],10)||0}}validateCSV(t,e){console.log(`Validating ${e} CSV data...`);const{rows:s,headers:i}=this.splitCSV(t);return e==="supervisors"?this.validateSupervisorsCSV(s,i):e==="examDays"?this.validateExamDaysCSV(s,i):!1}validateSupervisorsCSV(t,e){var r,u,d,o,c,p;const s=["Sukunimi","Etunimi","Ruotsinkielen taito","Valvonut aikaisemmin","Sijoitus","Jääviydet","Vuorotoiveet"],i=this.getDateColumns(e);if(!this.validateHeaders(e,[...s.slice(0,2),...i,...s.slice(2)]))return alert("Invalid Supervisors CSV format. Ensure headers match the expected format."),!1;const n={lastName:e.indexOf("Sukunimi"),firstName:e.indexOf("Etunimi"),languageSkill:e.indexOf("Ruotsinkielen taito"),previousExperience:e.indexOf("Valvonut aikaisemmin"),position:e.indexOf("Sijoitus"),disqualifications:e.indexOf("Jääviydet"),shiftPreferences:e.indexOf("Vuorotoiveet"),dateColumns:i.map(m=>e.indexOf(m))},a=["Äidinkieli","Kiitettävä","Hyvä","Tyydyttävä","Välttävä","Ei osaamista"],l=["Messukeskus","Keskustakampus / Messukeskus","Keskustakampus"];for(let m=1;m<t.length;m++){const f=t[m];if(!f[n.lastName]||!f[n.firstName])return alert(`Row ${m+1} is missing a name.`),!1;const v=(r=f[n.languageSkill])==null?void 0:r.trim();if(!a.includes(v))return alert(`Invalid language skill in row ${m+1}. Allowed values: ${a.join(", ")}.`),!1;const h=(u=f[n.previousExperience])==null?void 0:u.trim();if(h&&h!=="Checked"&&h!=="Unchecked")return alert(`Invalid value in column "Valvonut aikaisemmin" for row ${m+1}. Allowed values: "Checked" or "Unchecked".`),!1;const g=(d=f[n.position])==null?void 0:d.trim();if(g&&!l.includes(g))return alert(`Invalid value in column "Sijoitus" for row ${m+1}. Allowed values: ${l.join(", ")}.`),!1;const y=(o=f[n.disqualifications])==null?void 0:o.trim();if(y&&!/^([A-Za-z0-9]+( )?)*$/.test(y))return alert(`Invalid value in column "Jääviydet" for row ${m+1}. Expected a space-separated list of codes.`),!1;const x=(c=f[n.shiftPreferences])==null?void 0:c.trim();if(x&&!/^(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}-\d{2}:\d{2}( )?)*$/.test(x))return alert(`Invalid value in column "Vuorotoiveet" for row ${m+1}. Expected format: "DD.MM.YYYY HH:MM-HH:MM".`),!1;for(const b of n.dateColumns){const E=(p=f[b])==null?void 0:p.trim();if(E&&E!=="Checked"&&E!=="Unchecked")return alert(`Invalid value in column "${e[b]}" for row ${m+1}. Allowed values: "Checked" or "Unchecked".`),!1}}return!0}validateExamDaysCSV(t,e){const s=["Päivä","Koe klo","Valintakokeen nimi","Koekoodi","Osallistujat yhteensä"],i=e.filter(a=>/^Halli [A-Za-z0-9]+ osallistujat$/.test(a)),n=["Työvuoro A klo","Työvuoro A hlömäärä","Työvuoro B klo","Työvuoro B hlömäärä"];if(!this.validateHeaders(e,[...s,...i,...n]))return alert('Invalid Exam Days CSV format. Ensure all hall columns are named as "Halli X osallistujat".'),!1;for(let a=1;a<t.length;a++){const l=t[a];if(!/^\d{2}\.\d{2}\.\d{4}$/.test(l[e.indexOf("Päivä")]))return alert(`Invalid date format in row ${a+1}. Expected format: DD.MM.YYYY.`),!1;if(!/^\d{2}:\d{2}-\d{2}:\d{2}$/.test(l[e.indexOf("Koe klo")]))return alert(`Invalid time range in row ${a+1}. Expected format: HH:MM-HH:MM.`),!1;const r=l[e.indexOf("Osallistujat yhteensä")];if(isNaN(parseInt(r,10)))return alert(`Invalid participant count in row ${a+1}. Must be a number.`),!1;for(const p of i){const m=l[e.indexOf(p)];if(m&&isNaN(parseInt(m,10)))return alert(`Invalid value in column "${p}" for row ${a+1}. Must be a number.`),!1}const u=e.indexOf("Työvuoro A klo"),d=e.indexOf("Työvuoro B klo");if(u!==-1&&!/^\d{2}:\d{2}-\d{2}:\d{2}$/.test(l[u]))return alert(`Invalid time range in "Työvuoro A klo" for row ${a+1}. Expected format: HH:MM-HH:MM.`),!1;if(d!==-1&&l[d]&&!/^\d{2}:\d{2}-\d{2}:\d{2}$/.test(l[d]))return alert(`Invalid time range in "Työvuoro B klo" for row ${a+1}. Expected format: HH:MM-HH:MM.`),!1;const o=e.indexOf("Työvuoro A hlömäärä"),c=e.indexOf("Työvuoro B hlömäärä");if(o!==-1&&isNaN(parseInt(l[o],10)))return alert(`Invalid value in "Työvuoro A hlömäärä" for row ${a+1}. Must be a number.`),!1;if(c!==-1&&l[c]&&isNaN(parseInt(l[c],10)))return alert(`Invalid value in "Työvuoro B hlömäärä" for row ${a+1}. Must be a number.`),!1}return!0}splitCSV(t){const e=t.split(`
`).map(i=>i.split(";").map(n=>n.trim())),s=e.shift();return{rows:e,headers:s}}getDateColumns(t){return t.filter(e=>/^\d{2}\.\d{2}\.\d{4}$/.test(e))}validateHeaders(t,e){console.log("Validating CSV headers...");const s=e.filter((i,n)=>{var a;return((a=t[n])==null?void 0:a.trim())!==i.trim()});return s.length>0?(console.warn("CSV headers do not match the expected format. Missing or incorrect headers:",s),alert(`CSV headers do not match the expected format. The following headers are missing or incorrect: ${s.join(", ")}`),!1):!0}}class k{constructor(t,e){this.headers=t,this.data=e}render(){const t=document.createElement("table");t.className="schedule-table";const e=document.createElement("tr");return this.headers.forEach(s=>{const i=document.createElement("th");i.textContent=s,e.appendChild(i)}),t.appendChild(e),console.log("Created heder row",this.headers),console.log("Header row",e),this.data.forEach(s=>{const i=document.createElement("tr");Object.values(s).forEach(n=>{const a=document.createElement("td");a.innerHTML=n,i.appendChild(a)}),t.appendChild(i)}),t}}class ${constructor(t,e){this.assignments=t,this.examDays=e}render(){this.renderScheduleTable(),this.renderSummaryTable()}renderScheduleTable(){const t=document.getElementById("schedule-table-container"),e=["First Name","Last Name","Language Skill","Previous Experience","Disqualifications","Total Shifts","Shift Details"],s=Object.entries(this.assignments).map(([a,l])=>({firstName:l.supervisor.firstName,lastName:l.supervisor.lastName,languageSkill:l.supervisor.languageSkill,previousExperience:l.supervisor.previousExperience,disqualifications:l.supervisor.disqualifications.length>0?l.supervisor.disqualifications.join(", "):"None",totalShifts:l.shifts.length,shiftDetails:this.formatShiftDetails(l.shifts)})),n=new k(e,s).render();t.innerHTML="",t.appendChild(n)}renderSummaryTable(){const t=document.getElementById("summary-table-container"),e=["Shift","Supervisors Assigned","Supervisors by Hall","Actions"],s=this.examDays.flatMap(a=>["shiftA","shiftB"].map(l=>{const r=a[l];if(r&&r.timeRange){const u=this.getAssignedSupervisors(a.date,r.timeRange),d=this.getHallSummary(a.halls,u),o=this.createSupervisorList(a.date,r.timeRange),c=this.createStatsList(a.date,r.timeRange);return{shift:`${a.date} (${r.timeRange}, Exam: ${a.examCode})`,supervisorsAssigned:`${u.length} / ${r.minSupervisors}`,supervisorsByHall:d,actions:`
                            <button class="view-supervisors-btn" data-date="${a.date}" data-time-range="${r.timeRange}">View Supervisors</button>
                            <div id="supervisor-list-${a.date}-${r.timeRange}" class="supervisor-list" style="display: none; margin-top: 10px; padding: 5px; border: 1px solid #ccc; background-color: #f9f9f9;">
                            ${o}</div>
                            <button class="view-stats-btn" data-date="${a.date}" data-time-range="${r.timeRange}">View Stats</button>
                            <div id="stats-${a.date}-${r.timeRange}" class="stats-list" style="display: none; margin-top: 10px; padding: 5px; border: 1px solid #ccc; background-color: #f9f9f9;">
                            ${c}</div>
                        `}}return null}).filter(l=>l!==null)),n=new k(e,s).render();t.innerHTML="",t.appendChild(n),t.querySelectorAll(".view-supervisors-btn").forEach(a=>{a.addEventListener("click",l=>{const{date:r,timeRange:u}=l.target.dataset;this.handleViewSupervisors(r,u)})}),t.querySelectorAll(".view-stats-btn").forEach(a=>{a.addEventListener("click",l=>{const{date:r,timeRange:u}=l.target.dataset;this.handleViewStats(r,u)})})}handleViewSupervisors(t,e){let s=document.getElementById(`supervisor-list-${t}-${e}`);s.style.display=s.style.display==="none"?"block":"none"}handleViewStats(t,e){let s=document.getElementById(`stats-${t}-${e}`);s.style.display=s.style.display==="none"?"block":"none"}formatShiftDetails(t){return t.map(e=>`${e.date} (${e.timeRange}, Exam: ${e.examCode}, Hall: ${e.hall||"N/A"})`).join("<br>")}getAssignedSupervisors(t,e){return Object.values(this.assignments).flatMap(s=>s.shifts).filter(s=>s.date===t&&s.timeRange===e)}getHallSummary(t,e){const s=t.reduce((i,n)=>(i[n.name]=e.filter(a=>a.hall===n.name).length,i),{});return Object.entries(s).map(([i,n])=>`${i}: ${n}`).join("<br>")}createSupervisorList(t,e){return this.getSupervisorsForShift(t,e).join("<br>")}getSupervisorsForShift(t,e){return Object.entries(this.assignments).filter(([s,i])=>i.shifts.some(n=>n.date===t&&n.timeRange===e)).map(([s,i])=>{const n=i.shifts.find(a=>a.date===t&&a.timeRange===e);return`${i.supervisor.firstName} ${i.supervisor.lastName} (${n.hall||"N/A"})`})}createStatsList(t,e){const s=this.getStatsForShift(t,e);return`
            <strong>Supervisor Stats:</strong><br>
            Language Skills: ${s.languageSkills}<br>
            Previous Experience: ${s.previousExperience}
        `}getStatsForShift(t,e){const s=Object.entries(this.assignments).filter(([l,r])=>r.shifts.some(u=>u.date===t&&u.timeRange===e)).map(([l,r])=>r.supervisor),i=s.map(l=>l.languageSkill).reduce((l,r)=>(l[r]=(l[r]||0)+1,l),{}),n=["Äidinkieli","Kiitettävä","Hyvä","Tyydyttävä","Välttävä","Ei osaamista"].map(l=>`${l}: ${i[l]||0}`).join(", ");console.log("Supervisors list",s);const a=s.filter(l=>l.previousExperience).length;return{languageSkills:n,previousExperience:`${a} / ${s.length}`}}}class O{constructor(t,e,s){console.log("Initializing ExportShifts with assignments:",e),this.container=document.getElementById(t),this.assignments=e,this.examDays=s,this.render()}render(){console.log("Rendering ExportShifts UI..."),this.container.innerHTML=`
            <button id="export-shifts-button">Export Shifts</button>
        `,document.getElementById("export-shifts-button").addEventListener("click",()=>{this.exportToCSV()})}exportToCSV(){const t=["First Name","Last Name","Disqualifications","Language Skill","Previous Experience",...this.examDays.flatMap(a=>[`${a.date}-${a.examCode}`,`${a.date}-${a.examCode}-Hall`])],e=Object.values(this.assignments).map(({supervisor:a,shifts:l})=>{console.log("Shifts:",l);const r=l.reduce((d,o)=>(d[o.examCode]={date:o.date,timeRange:o.timeRange,hall:o.hall},d),{});console.log("Shift Map:",r);const u=[a.firstName,a.lastName,a.disqualifications.join(", "),a.languageSkill,a.previousExperience?"Checked":"Unchecked",...this.examDays.flatMap(d=>{const o=r[d.examCode]||{};return[o.timeRange||"",o.hall||""]})];return console.log("Generated row:",u),u});console.log("CSV Headers:",t),console.log("CSV Rows:",e);const s=[t,...e].map(a=>a.join(";")).join(`
`);console.log("Generated CSV Content:",s);const i=new Blob([s],{type:"text/csv;charset=utf-8;"}),n=document.createElement("a");n.href=URL.createObjectURL(i),n.download="shifts_export.csv",n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n)}}class N{constructor(t,e){this.supervisors=t,this.exams=e,this.assignments={},this.supervisorShiftCounts={},this.supervisorsByDay={},this.experienceRatio=0,this.languageSkillRatio=0,this.precomputeSupervisorData()}precomputeSupervisorData(){this.supervisors.forEach(t=>{this.supervisorShiftCounts[t.id]=0,t.availableDays.forEach(e=>{this.supervisorsByDay[e]||(this.supervisorsByDay[e]=[]),this.supervisorsByDay[e].push(t)})})}assignShifts(){console.log("Starting shift assignment..."),console.log("Supervisors:",this.supervisors),console.log("Exams:",this.exams);const t=this.supervisors.filter(r=>r.languageSkill==="Äidinkieli"||r.languageSkill==="Kiitettävä"),e=this.supervisors.filter(r=>r.languageSkill==="Hyvä"),s=this.supervisors.filter(r=>r.previousExperience),i=this.exams.flatMap(r=>{var u;return[{exam:r,shift:r.shiftA,availableSupervisors:[]},(u=r.shiftB)!=null&&u.timeRange?{exam:r,shift:r.shiftB,availableSupervisors:[]}:null].filter(d=>d&&d.shift.minSupervisors>0)}),n=i.reduce((r,u)=>r+u.shift.minSupervisors,0);console.log("Total minimum supervisors required:",n);const a={language:t.length+e.length*.5,experience:s.length};console.log("Prioritized supervisors with language skill:",a.language),console.log("Prioritized supervisors with previous experience:",a.experience),this.experienceRatio=Math.min(1,a.experience/n),this.languageSkillRatio=Math.min(1,a.language/n),console.log("Experience ratio:",this.experienceRatio),console.log("Language skill ratio:",this.languageSkillRatio),i.forEach(r=>{r.availableSupervisors=this.getAvailableSupervisors(r)}),i.sort((r,u)=>r.availableSupervisors.length-r.shift.minSupervisors-(u.availableSupervisors.length-u.shift.minSupervisors)),i.forEach(({exam:r,shift:u,availableSupervisors:d})=>{console.log(`Available supervisors for ${r.date} (${u.timeRange}):`,d);const o=[];for(;o.length<u.minSupervisors&&d.length>0;){const c=o.filter(g=>g.previousExperience).length,p=o.filter(g=>g.languageSkill==="Äidinkieli"||g.languageSkill==="Kiitettävä").length,m=o.filter(g=>g.languageSkill==="Hyvä").length;console.log("Exam code:",r.examCode,"Date:",r.date,"Time range:",u.timeRange);const f=Math.min(1,c/u.minSupervisors),v=Math.min(1,(p+m*.5)/u.minSupervisors);console.log("Experience Ratio:",f),console.log("Language Ratio:",v);const h=this.selectSupervisorForShift(d.filter(g=>!this.hasShiftOnSameDay(g,r.date)),v,f);if(!h)break;console.log(`Selected supervisor: ${h.firstName} ${h.lastName}`,"with language skill:",h.languageSkill,"and previous experience:",h.previousExperience),o.push(h),this.supervisorShiftCounts[h.id]++,this.addAssignment(h,r,u),d.splice(d.indexOf(h),1)}o.length<u.minSupervisors&&console.error(`Error: Not enough supervisors assigned for shift on ${r.date} (${u.timeRange}). Required: ${u.minSupervisors}, Assigned: ${o.length}`)});const l=this.supervisors.filter(r=>this.supervisorShiftCounts[r.id]<3);console.log("Supervisors with fewer than 3 shifts:",l),l.forEach(r=>{const u=i.filter(({exam:d,shift:o,availableSupervisors:c})=>o.minSupervisors>0&&c.includes(r)&&!this.hasShiftOnSameDay(r,d.date)&&this.supervisorShiftCounts[r.id]<3).map(({exam:d,shift:o})=>{var c,p;return{exam:d,shift:o,extraSupervisors:(((c=o.assignedSupervisors)==null?void 0:c.length)||0)-o.minSupervisors,score:((((p=o.assignedSupervisors)==null?void 0:p.length)||0)-o.minSupervisors)/o.minSupervisors}}).sort((d,o)=>d.score-o.score||o.exam.maxParticipants-d.exam.maxParticipants);console.log(`Unfilled shifts for ${r.firstName} ${r.lastName}:`,JSON.parse(JSON.stringify(u))),u.forEach(({exam:d,shift:o})=>{this.supervisorShiftCounts[r.id]>=3||(this.addAssignment(r,d,o),this.supervisorShiftCounts[r.id]++)})}),this.exams.forEach(r=>{this.assignSupervisorsToHalls(r)})}selectSupervisorForShift(t,e,s){return t.length===0?null:t.reduce((i,n)=>{const a=this.supervisorShiftCounts[i.id],l=this.supervisorShiftCounts[n.id];return l<a?(console.log("Selecting current supervisor:",JSON.parse(JSON.stringify(n)),"over selected:",JSON.parse(JSON.stringify(i)),"due to shift count."),n):l===a?this.compareSupervisorPriority(i,n,e,s):(console.log("Keeping selected supervisor:",JSON.parse(JSON.stringify(i)),"over current:",JSON.parse(JSON.stringify(n)),"due to shift count."),i)},t[0])}compareSupervisorPriority(t,e,s,i){let n=Math.max(0,(.8-i/this.experienceRatio)*(t.previousExperience?1:0))+Math.max(0,(.7-s/this.languageSkillRatio)*(t.languageSkill==="Äidinkieli"||t.languageSkill==="Kiitettävä"?1:t.languageSkill==="Hyvä"?.5:0));return Math.max(0,(.8-i/this.experienceRatio)*(e.previousExperience?1:0))+Math.max(0,(.7-s/this.languageSkillRatio)*(e.languageSkill==="Äidinkieli"||e.languageSkill==="Kiitettävä"?1:e.languageSkill==="Hyvä"?.5:0))>n?e:t}getAvailableSupervisors(t){const{date:e,examCode:s}=t.exam,{timeRange:i}=t.shift;return(this.supervisorsByDay[e]||[]).filter(n=>this.isSupervisorAvailable(n,e,i,s))}isSupervisorAvailable(t,e,s,i){return!this.hasConflicts(t,i)&&!this.hasShiftOnSameDay(t,e)&&this.matchesShiftPreference(t,e,s)}matchesShiftPreference(t,e,s){if(t.shiftPreferences.length===0)return!0;const i=t.shiftPreferences.filter(a=>a.startsWith(e));return i.length===0?!0:i[0].split(" ")[1]===s}hasConflicts(t,e){var s;return((s=t.disqualifications)==null?void 0:s.includes(e))||!1}hasShiftOnSameDay(t,e){var i;return(((i=this.assignments[t.id])==null?void 0:i.shifts)||[]).some(n=>n.date===e)}addAssignment(t,e,s){this.assignments[t.id]||(this.assignments[t.id]={supervisor:t,shifts:[]}),this.assignments[t.id].shifts.push({date:e.date,timeRange:s.timeRange,examCode:e.examCode,hall:null}),s.assignedSupervisors||(s.assignedSupervisors=[]),s.assignedSupervisors.push(t)}assignSupervisorsToHalls(t){const e=s=>{const i=Object.values(this.assignments).flatMap(a=>a.shifts).filter(a=>a.date===t.date&&a.timeRange===s.timeRange);if(i.length===0)return;const n=t.totalParticipants;t.halls.forEach(a=>{if(a.participants===0)return;const l=a.participants/n,r=Math.round(l*i.length);for(let u=0;u<r&&i.length>0;u++){const d=i.shift();d.hall=a.name}}),i.forEach((a,l)=>{const r=t.halls.filter(d=>d.participants>0),u=r[l%r.length];a.hall=u.name})};e(t.shiftA),t.shiftB&&e(t.shiftB)}getAssignments(){return this.assignments}}document.addEventListener("DOMContentLoaded",()=>{let S=[],t=[],e=0,s={};const i={en:{appTitle:"SHIFT - Smart Handler for Invigilation and Functional Timetables",reservedKeskustaLabel:"Reserved for Keskusta:",reservedLastName:"Last Name",reservedFirstName:"First Name",reservedPosition:"Position",assignShiftsButton:"Assign Shifts",scheduleFirstName:"First Name",scheduleLastName:"Last Name",scheduleSwedishSkill:"Swedish Skill",scheduleExperience:"Experience",scheduleDisqualifications:"Disqualifications",scheduleShiftCount:"Shift Count",scheduleAssignedShifts:"Assigned Shifts",summaryShift:"Shift",summarySupervisorsAssigned:"Supervisors Assigned",summarySupervisorsByHall:"Supervisors by Hall",summaryActions:"Actions"},fi:{appTitle:"VUORO - Valintakokeiden organisointialgoritmi ja resurssien ohjaaja",reservedKeskustaLabel:"Keskustaan varattavat:",reservedLastName:"Sukunimi",reservedFirstName:"Etunimi",reservedPosition:"Sijoitus",assignShiftsButton:"Jaa työvuorot",scheduleFirstName:"Etunimi",scheduleLastName:"Sukunimi",scheduleSwedishSkill:"Ruotsin taito",scheduleExperience:"Kokemus",scheduleDisqualifications:"Jääviydet",scheduleShiftCount:"Vuorojen määrä",scheduleAssignedShifts:"Määrätyt vuorot",summaryShift:"Vuoro",summarySupervisorsAssigned:"Valvojia määrätty",summarySupervisorsByHall:"Valvojat halleittain",summaryActions:"Toiminnot"}},n=(o,c)=>{const p=document.getElementById(o);p&&(p.textContent=c)},a=o=>{[{id:"app-title",key:"appTitle"},{id:"reserved-keskusta-label",key:"reservedKeskustaLabel"},{id:"assign-shifts-button",key:"assignShiftsButton"}].forEach(({id:p,key:m})=>{n(p,i[o][m])})};document.getElementById("language-select").addEventListener("change",o=>{a(o.target.value)}),a("en"),document.getElementById("uploadFilesButton").addEventListener("click",async()=>{try{const{supervisors:o,examDays:c,supervisorsData:p,examDaysData:m}=await new C().handleFileUpload();u(p,m,o,c),document.getElementById("preview-container").style.display="block"}catch(o){console.error("Error uploading files:",o),alert("An error occurred while uploading files. Please try again.")}});const l=o=>{const c=parseInt(o,10);return isNaN(c)||c<0?(alert('Please enter a valid number for "Keskustaan varattavat".'),0):c};document.getElementById("reserved-keskusta-button").addEventListener("click",()=>{const o=document.getElementById("reserved-keskusta-input").value;e=l(o),console.log(`Reserved for Keskusta: ${e}`),n("reserved-keskusta-display",`Current value: ${e}`)});const r=(o,c)=>{const p=document.getElementById(o);if(!p)return;console.log(`Creating table for ${o} with data:`,c);const m=c.split(`
`).map(y=>y.split(";").map(x=>x.trim())),f=m[0],v=m.slice(1),g=new k(f,v).render();p.innerHTML="",p.appendChild(g)},u=(o,c,p,m)=>{console.log("Processed Supervisors:",p),console.log("Processed Exam Days:",m),S=p,t=m,console.log("Files uploaded and processed successfully."),console.log("Generating data preview..."),r("supervisorsPreview",o),r("examDaysPreview",c),document.getElementById("assign-shifts-container").style.display="block",document.getElementById("reserved-keskusta-container").style.display="block"},d=o=>{const c=document.getElementById("reserved-keskusta-table-container");if(!c)return;const p=["Last Name","First Name","Position","Language Skill","Previous Experience","Disqualifications"],m=o.map(h=>({lastName:h.lastName,firstName:h.firstName,position:h.position,languageSkill:h.languageSkill,previousExperience:h.previousExperience,disqualifications:h.disqualifications.length>0?h.disqualifications.join(", "):"None"})),v=new k(p,m).render();c.innerHTML="",c.appendChild(v)};document.getElementById("assign-shifts-button").addEventListener("click",()=>{if(S.length===0||t.length===0){alert("Please upload and validate the CSV files first.");return}const o=[];["Keskustakampus","Keskustakampus / Messukeskus","Messukeskus"].forEach(v=>{const h=S.filter(g=>g.position===v&&!o.includes(g));o.push(...h.slice(0,e-o.length))}),d(o);const p=S.filter(v=>!o.includes(v)),m=new N(p,t);m.assignShifts(),s=m.getAssignments(),console.log("Assigned Shifts:",s),new $(s,t).render(),document.getElementById("schedule-display-container").style.display="block",new O("export-container",s,t)})});
